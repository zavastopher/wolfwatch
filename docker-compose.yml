version: "3.8"

services:
  api:
    build:
      context: ./api/
      dockerfile: Dockerfile
    container_name: wolfwatch_api
    restart: unless-stopped
    volumes:
      - "./api:/usr/src/app"
    ports:
      - 4001:3001
    depends_on:
      - mysql
    env_file:
      - .env.production

  client:
    build:
      context: ./client/
      dockerfile: Dockerfile
    container_name: wolfwatch_frontend
    restart: unless-stopped
    ports:
      - 4000:3000
    depends_on:
      - api

  nginx:
    build:
      context: ./nginx/
    restart: unless-stopped
    ports:
      - 80:80
    depends_on:
      - api
      - client
      - scheduler

  mysql:
    build:
      context: ./database/
    restart: always
    container_name: wolfwatch_database
    ports:
      - 4306:3306
    volumes:
      - mysql_data:/var/lib/mysql
    env_file:
      - .env.production

  redis:
    image: redis:latest
    restart: always
    container_name: wolfwatch_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  scheduler:
    build:
      context: ./scraping/
      dockerfile: Dockerfile
    container_name: wolfwatch_scheduler
    restart: unless-stopped
    ports:
      - 4002:3002
    depends_on:
      - redis
    volumes:
      - "./scraping:/app"
    env_file:
      - .env.development

  celery_worker:
    build:
      context: ./scraping/
    container_name: wolfwatch_scan_worker
    command: -A TaskScheduler worker --loglevel=info
    entrypoint: celery
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - "./scraping:/app"
  
  celery_beat:
    build:
      context: ./scraping/
    command: -A Tasks beat --loglevel=debug --scheduler redbeat.RedBeatScheduler
    container_name: wolfwatch_scan_manager
    entrypoint: celery
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - "./scraping:/app"

volumes:
  mysql_data:
  redis_data:
